// Import KPuzzle and Cubing.js random scramble dependencies
import { randomScrambleForEvent } from "https://cdn.cubing.net/js/cubing/scramble";
import { puzzles } from "https://cdn.cubing.net/js/cubing/puzzles"

const timer = document.querySelector("#timer")
const config = {
    binaryThresh: 0.5,
    hiddenLayers: [20,6], // array of ints for the sizes of the hidden layers in the network
    activation: 'relu', // supported activation types: ['sigmoid', 'relu', 'leaky-relu', 'tanh'],
    leakyReluAlpha: 0.01, // supported for activation type 'leaky-relu'
    learningRate: 0.3
};
let isRunning = false
var interval = null; 
let arr = []
let tableBody = document.getElementsByTagName('tbody')[0]
let scrambleElem = document.getElementById('scramble')
let difficultyPreference = Number(document.getElementById('myRange').value)/100
let difficultyLabel = document.querySelector('.slidecontainer label')
let timeTableRows = document.querySelectorAll('.table-container > table tr')
let savedNet = {
    "type": "NeuralNetwork",
    "sizes": [
        40,
        15,
        6,
        1
    ],
    "layers": [
        {
            "weights": [],
            "biases": []
        },
        {
            "weights": [
                [
                    -1.4260025024414062,
                    -2.234063148498535,
                    -3.409961700439453,
                    5.696512222290039,
                    1.4199434518814087,
                    0.04969959333539009,
                    -0.7865256667137146,
                    3.264334201812744,
                    3.851689338684082,
                    -2.786007881164551,
                    0.4825546145439148,
                    -5.861308574676514,
                    0.9615122675895691,
                    0.11163387447595596,
                    -1.5826414823532104,
                    1.0583691596984863,
                    0.34239333868026733,
                    0.4668547511100769,
                    -3.8551042079925537,
                    2.102511167526245,
                    1.7506239414215088,
                    4.162086009979248,
                    5.629166126251221,
                    -3.670600414276123,
                    0.6668830513954163,
                    -0.509280800819397,
                    -0.8372182846069336,
                    2.3457958698272705,
                    -2.7034590244293213,
                    3.9208011627197266,
                    -5.06656551361084,
                    1.3693106174468994,
                    2.414832830429077,
                    6.228259563446045,
                    2.056901216506958,
                    3.2376298904418945,
                    -2.9587907791137695,
                    -0.4770674705505371,
                    -4.597265720367432,
                    -0.7824259400367737
                ],
                [
                    -0.7572541236877441,
                    -4.780245780944824,
                    -1.140113115310669,
                    1.326759696006775,
                    5.131314277648926,
                    4.733245849609375,
                    -3.271029472351074,
                    -0.22152096033096313,
                    -1.291396975517273,
                    0.8846872448921204,
                    -1.4369051456451416,
                    4.666941165924072,
                    -4.097544193267822,
                    -2.5177712440490723,
                    3.4848101139068604,
                    6.542061805725098,
                    2.3888256549835205,
                    -3.9472339153289795,
                    -2.1263251304626465,
                    -1.8579773902893066,
                    -0.4567379057407379,
                    -6.098875045776367,
                    -0.37324902415275574,
                    -0.6708362698554993,
                    -2.0428788661956787,
                    -3.265218496322632,
                    -1.5829840898513794,
                    -0.4567006230354309,
                    7.830311298370361,
                    2.4020884037017822,
                    2.580441474914551,
                    1.4576146602630615,
                    0.5025738477706909,
                    3.3141796588897705,
                    -2.1550087928771973,
                    1.7839162349700928,
                    -3.5182957649230957,
                    -2.8839855194091797,
                    -5.186604022979736,
                    1.4708484411239624
                ],
                [
                    1.4104329347610474,
                    -0.6328548789024353,
                    0.10537310689687729,
                    -5.113987922668457,
                    0.26680368185043335,
                    2.31866192817688,
                    -4.750677585601807,
                    -2.973306179046631,
                    6.681180953979492,
                    0.41282162070274353,
                    -6.208959102630615,
                    -1.8431355953216553,
                    3.127452850341797,
                    1.399070382118225,
                    3.845034122467041,
                    0.5610643029212952,
                    2.3220999240875244,
                    -2.8793375492095947,
                    -0.20428802073001862,
                    -2.242950916290283,
                    -1.5280394554138184,
                    6.94042444229126,
                    -4.956353664398193,
                    6.183955669403076,
                    2.5449187755584717,
                    3.261535882949829,
                    2.589498519897461,
                    -6.397702217102051,
                    -2.5332913398742676,
                    -1.6267889738082886,
                    -3.9638261795043945,
                    -7.088947296142578,
                    1.6860448122024536,
                    -2.2624664306640625,
                    1.0839033126831055,
                    7.911927700042725,
                    -0.9813820123672485,
                    2.969972848892212,
                    -0.1583528369665146,
                    -1.5533146858215332
                ],
                [
                    7.466387748718262,
                    -2.0608959197998047,
                    -5.80543851852417,
                    -0.2655779719352722,
                    1.4650157690048218,
                    2.165224075317383,
                    -1.8273862600326538,
                    -2.2927141189575195,
                    0.5545440316200256,
                    -1.77285897731781,
                    -4.212010860443115,
                    3.3709402084350586,
                    2.993147611618042,
                    -3.599923610687256,
                    2.9266276359558105,
                    -3.2096331119537354,
                    2.234473705291748,
                    3.0024771690368652,
                    -0.7749572992324829,
                    -0.5383011698722839,
                    -3.9415717124938965,
                    -0.21072205901145935,
                    -5.524359226226807,
                    2.0888259410858154,
                    3.2747504711151123,
                    -2.174166202545166,
                    3.3107526302337646,
                    -5.413763999938965,
                    2.1705968379974365,
                    -2.2859396934509277,
                    8.255505561828613,
                    2.2820398807525635,
                    -2.2026021480560303,
                    1.4208815097808838,
                    -2.186530351638794,
                    -0.1456695944070816,
                    -2.1944994926452637,
                    3.5126051902770996,
                    0.949085533618927,
                    -3.038949489593506
                ],
                [
                    -2.0540876388549805,
                    -9.636033058166504,
                    -2.833892822265625,
                    -0.4250008165836334,
                    3.2775347232818604,
                    -1.3593429327011108,
                    0.2673516869544983,
                    1.3983471393585205,
                    -2.1451315879821777,
                    -0.6636350750923157,
                    -2.238590717315674,
                    -1.5621209144592285,
                    1.1130050420761108,
                    0.28275400400161743,
                    0.9891912341117859,
                    -2.935422420501709,
                    -1.575730800628662,
                    -0.14859409630298615,
                    -2.314260959625244,
                    -2.0693938732147217,
                    0.9686881899833679,
                    1.674078345298767,
                    -2.560321807861328,
                    0.5695673227310181,
                    3.573107957839966,
                    4.57276725769043,
                    0.9333620667457581,
                    -1.1512328386306763,
                    2.3588473796844482,
                    -1.4180688858032227,
                    -1.2596527338027954,
                    -4.54118013381958,
                    -2.0931708812713623,
                    -0.3518758714199066,
                    1.5363972187042236,
                    -4.797640800476074,
                    1.7870769500732422,
                    -2.449955701828003,
                    -0.2824685275554657,
                    2.3451318740844727
                ],
                [
                    0.5535523295402527,
                    -4.008656024932861,
                    9.055182456970215,
                    -1.397321343421936,
                    1.316819190979004,
                    -0.5520885586738586,
                    -3.537478446960449,
                    -3.2553904056549072,
                    2.541712760925293,
                    0.7545321583747864,
                    -2.6268868446350098,
                    1.0796669721603394,
                    -2.212913751602173,
                    6.745977878570557,
                    1.374285340309143,
                    4.214267253875732,
                    -0.8765738010406494,
                    -4.5536956787109375,
                    0.7709453105926514,
                    -4.898980140686035,
                    3.522024393081665,
                    -1.0163438320159912,
                    1.328520655632019,
                    1.5372530221939087,
                    0.06133512780070305,
                    2.8275232315063477,
                    3.5213463306427,
                    -1.7037980556488037,
                    1.4277515411376953,
                    0.31846296787261963,
                    -9.444253921508789,
                    -1.103796124458313,
                    -4.2185869216918945,
                    -1.4200482368469238,
                    0.6737000346183777,
                    4.066601753234863,
                    -0.25883615016937256,
                    1.716772198677063,
                    1.9528414011001587,
                    0.9567568302154541
                ],
                [
                    -5.6028876304626465,
                    -1.5506953001022339,
                    -1.944970726966858,
                    4.091037750244141,
                    -1.7816699743270874,
                    6.8477020263671875,
                    6.669912815093994,
                    1.468300700187683,
                    0.0994483008980751,
                    2.106024980545044,
                    -0.9214476346969604,
                    3.1284143924713135,
                    -0.5155534744262695,
                    -1.9290176630020142,
                    0.382142037153244,
                    4.712545394897461,
                    0.925003170967102,
                    0.53554368019104,
                    -0.6638227701187134,
                    -3.7747299671173096,
                    0.378704309463501,
                    -0.32526683807373047,
                    -5.666400909423828,
                    0.9341731667518616,
                    2.2919259071350098,
                    -1.6535730361938477,
                    1.7716164588928223,
                    -6.197980880737305,
                    -2.5731847286224365,
                    0.7531942129135132,
                    3.324814558029175,
                    0.4851086139678955,
                    0.058315664529800415,
                    -2.832249879837036,
                    -8.215782165527344,
                    0.4325357973575592,
                    7.27026891708374,
                    -3.9385809898376465,
                    2.4097044467926025,
                    1.0775073766708374
                ],
                [
                    1.030306100845337,
                    -3.1404712200164795,
                    -0.6152951121330261,
                    6.264869213104248,
                    -8.546939849853516,
                    -0.04509320855140686,
                    2.886932134628296,
                    1.3088674545288086,
                    3.6083898544311523,
                    -0.06692454218864441,
                    0.6280225515365601,
                    4.285497665405273,
                    -0.9402948617935181,
                    -0.8681799173355103,
                    -1.0456007719039917,
                    5.274056911468506,
                    0.5052341818809509,
                    1.812039852142334,
                    -7.173350811004639,
                    -2.8793718814849854,
                    4.23328971862793,
                    -3.8498969078063965,
                    -1.8546291589736938,
                    -5.098479270935059,
                    3.4792251586914062,
                    -2.6056268215179443,
                    6.28687047958374,
                    -0.7365410327911377,
                    -2.3530099391937256,
                    3.045217275619507,
                    0.9010984301567078,
                    0.7961069941520691,
                    -4.931303024291992,
                    3.330641746520996,
                    -7.747693061828613,
                    -1.3484759330749512,
                    3.1585781574249268,
                    2.675992965698242,
                    -0.024603554978966713,
                    -3.5450968742370605
                ],
                [
                    -0.0627715066075325,
                    1.2717753648757935,
                    -0.35993847250938416,
                    4.724303245544434,
                    -1.5685184001922607,
                    -4.886838436126709,
                    5.204520225524902,
                    0.08919758349657059,
                    1.1521105766296387,
                    1.4761546850204468,
                    2.7976179122924805,
                    -1.351839542388916,
                    2.0647995471954346,
                    0.3604969084262848,
                    -1.7608132362365723,
                    -3.4941208362579346,
                    -2.848459005355835,
                    0.701252281665802,
                    3.6966891288757324,
                    -1.8430235385894775,
                    0.5145371556282043,
                    8.442728996276855,
                    -4.649689197540283,
                    5.403153419494629,
                    -0.4114269018173218,
                    -0.12454481422901154,
                    -0.26382899284362793,
                    4.231786251068115,
                    -8.370063781738281,
                    1.9045140743255615,
                    -0.9315793514251709,
                    1.6024751663208008,
                    -0.28982555866241455,
                    1.6542325019836426,
                    -3.7336959838867188,
                    1.4237596988677979,
                    0.22226087749004364,
                    0.022130800411105156,
                    3.5135536193847656,
                    1.8575282096862793
                ],
                [
                    7.8293023109436035,
                    -0.05339714512228966,
                    1.7001949548721313,
                    -5.703507423400879,
                    -4.3035712242126465,
                    -3.9155611991882324,
                    3.0467216968536377,
                    -1.4715919494628906,
                    -0.30426323413848877,
                    1.1533875465393066,
                    1.853651523590088,
                    -1.7743895053863525,
                    1.887256383895874,
                    2.3438358306884766,
                    -1.4065451622009277,
                    1.177833914756775,
                    1.893373966217041,
                    3.575075149536133,
                    4.38806676864624,
                    -6.434511184692383,
                    -1.548445463180542,
                    -1.134384274482727,
                    -3.597219944000244,
                    1.3984322547912598,
                    0.931858479976654,
                    2.664987087249756,
                    -3.663147449493408,
                    0.7017968893051147,
                    -2.568010091781616,
                    3.259983539581299,
                    4.527231216430664,
                    -2.806339979171753,
                    -0.7526706457138062,
                    -0.31969037652015686,
                    3.21126651763916,
                    0.5342221260070801,
                    -1.7538830041885376,
                    1.2931981086730957,
                    0.5991746783256531,
                    -1.0063587427139282
                ],
                [
                    -3.1842737197875977,
                    -0.761485755443573,
                    1.027940273284912,
                    -1.3560329675674438,
                    1.8633698225021362,
                    -1.9372895956039429,
                    3.3172669410705566,
                    3.14609432220459,
                    -1.5239626169204712,
                    -2.6412274837493896,
                    4.5543999671936035,
                    -6.301907062530518,
                    -0.14421388506889343,
                    3.5926260948181152,
                    -4.400478363037109,
                    3.0022974014282227,
                    -1.5951728820800781,
                    -0.8798947930335999,
                    0.6123866438865662,
                    -1.8361176252365112,
                    -0.8178665041923523,
                    -1.4613503217697144,
                    -0.7800866365432739,
                    6.61016321182251,
                    -2.523210048675537,
                    3.959949493408203,
                    -5.698605537414551,
                    0.30921199917793274,
                    -4.394497871398926,
                    5.572521686553955,
                    -2.282952308654785,
                    0.42228275537490845,
                    2.3675708770751953,
                    1.8996754884719849,
                    6.155640125274658,
                    -2.6570136547088623,
                    0.9200916290283203,
                    -4.411798000335693,
                    -0.8322352170944214,
                    -2.05128812789917
                ],
                [
                    -0.6827051043510437,
                    -3.3260796070098877,
                    4.0983734130859375,
                    -1.252756118774414,
                    0.11228974908590317,
                    2.1538593769073486,
                    -2.7526392936706543,
                    4.810178279876709,
                    0.3310156762599945,
                    1.6796761751174927,
                    -4.507857322692871,
                    -2.670041084289551,
                    -4.8602471351623535,
                    3.129373550415039,
                    2.153740644454956,
                    7.631043434143066,
                    -2.0394492149353027,
                    2.218245506286621,
                    1.635792851448059,
                    0.6717357635498047,
                    3.5989248752593994,
                    4.496584892272949,
                    -1.5814433097839355,
                    -0.8308482766151428,
                    2.543555736541748,
                    -2.0871942043304443,
                    -4.962831020355225,
                    -3.6699788570404053,
                    1.1033315658569336,
                    -4.110389232635498,
                    -5.21726655960083,
                    2.356100082397461,
                    -0.8242470622062683,
                    0.43766993284225464,
                    4.56444787979126,
                    0.009080739691853523,
                    0.37784427404403687,
                    3.480455160140991,
                    2.1332807540893555,
                    1.395957112312317
                ],
                [
                    0.17831619083881378,
                    -0.39894184470176697,
                    -0.8548485040664673,
                    0.74223393201828,
                    -1.9289799928665161,
                    1.4314250946044922,
                    1.0548269748687744,
                    0.34486594796180725,
                    4.639654636383057,
                    -6.021055221557617,
                    0.6314107775688171,
                    -3.034745931625366,
                    2.0408761501312256,
                    0.14527831971645355,
                    -3.2423975467681885,
                    0.7635946869850159,
                    0.5943123698234558,
                    0.4366389214992523,
                    -6.212330341339111,
                    -5.336233615875244,
                    -2.980578660964966,
                    5.067263126373291,
                    -0.6273971199989319,
                    5.093756198883057,
                    -1.305482029914856,
                    2.8520753383636475,
                    3.0535521507263184,
                    -4.48203706741333,
                    -3.153205394744873,
                    5.029810905456543,
                    -6.827033042907715,
                    -0.2810446321964264,
                    -2.192901372909546,
                    1.2722541093826294,
                    3.2820627689361572,
                    -2.098252296447754,
                    1.8294072151184082,
                    -3.159444570541382,
                    3.555039644241333,
                    -5.210648059844971
                ],
                [
                    -0.9455863833427429,
                    5.742478847503662,
                    0.7800623178482056,
                    -4.960168361663818,
                    -7.923572063446045,
                    -4.589855670928955,
                    -1.1562178134918213,
                    3.6522622108459473,
                    4.432378768920898,
                    -2.4849414825439453,
                    5.33283805847168,
                    0.34545519948005676,
                    -3.469402313232422,
                    -4.94169807434082,
                    4.815189361572266,
                    -1.3512063026428223,
                    4.224264144897461,
                    -2.634251356124878,
                    2.5284647941589355,
                    2.60770320892334,
                    -2.4840691089630127,
                    -0.06889574229717255,
                    0.09742852300405502,
                    4.078248023986816,
                    0.9289433360099792,
                    2.75878643989563,
                    1.2040578126907349,
                    4.700339317321777,
                    0.42886659502983093,
                    2.1020009517669678,
                    -4.109307765960693,
                    0.9079620838165283,
                    1.6724027395248413,
                    2.093005418777466,
                    -2.7603204250335693,
                    2.261693239212036,
                    1.4481619596481323,
                    -0.5839243531227112,
                    -2.2948238849639893,
                    1.3706289529800415
                ],
                [
                    1.9641481637954712,
                    5.727953910827637,
                    4.246387481689453,
                    -3.26454758644104,
                    4.438769340515137,
                    -1.3187366724014282,
                    -0.21242451667785645,
                    -4.062961101531982,
                    -4.60366153717041,
                    -2.485558032989502,
                    2.8817360401153564,
                    2.930137872695923,
                    4.352518081665039,
                    3.527752161026001,
                    -3.7594993114471436,
                    -8.786432266235352,
                    -2.5926105976104736,
                    -0.795602560043335,
                    2.4074575901031494,
                    -0.37538543343544006,
                    -4.167060852050781,
                    -3.182089328765869,
                    3.799748182296753,
                    3.025582790374756,
                    -1.2106118202209473,
                    -0.757777750492096,
                    1.4960631132125854,
                    0.9721276164054871,
                    -0.9719274044036865,
                    2.5323925018310547,
                    -1.759423017501831,
                    4.449902534484863,
                    -4.685015678405762,
                    -0.24841400980949402,
                    5.255596160888672,
                    -1.3465309143066406,
                    1.2531570196151733,
                    -3.467456340789795,
                    1.0463778972625732,
                    -2.1976211071014404
                ]
            ],
            "biases": [
                0.9697251319885254,
                -1.5547187328338623,
                1.8050596714019775,
                -0.9647152423858643,
                -0.6862718462944031,
                0.7471078038215637,
                -0.7905690670013428,
                -1.746240496635437,
                1.1283038854599,
                0.34755223989486694,
                0.4156452715396881,
                2.293701648712158,
                -0.5649302005767822,
                0.340699702501297,
                -0.7611076235771179
            ]
        },
        {
            "weights": [
                [
                    0.3309079706668854,
                    -0.05347760394215584,
                    0.21533992886543274,
                    -0.10757561028003693,
                    0.8508211970329285,
                    -0.16257499158382416,
                    0.2971799671649933,
                    0.14322729408740997,
                    0.18393437564373016,
                    0.3125196695327759,
                    -0.1008363887667656,
                    0.16680046916007996,
                    -0.3720124661922455,
                    -0.08890024572610855,
                    0.43487241864204407
                ],
                [
                    0.8938068151473999,
                    -0.32012081146240234,
                    -0.7070067524909973,
                    -0.061822570860385895,
                    4.859202861785889,
                    0.6545521020889282,
                    0.6227236986160278,
                    -1.4161752462387085,
                    -0.23673617839813232,
                    0.7583343982696533,
                    -1.1157079935073853,
                    -0.13774654269218445,
                    0.9460707306861877,
                    0.9567813873291016,
                    -0.5252155065536499
                ],
                [
                    0.10264533758163452,
                    -0.2196476310491562,
                    -0.21288909018039703,
                    0.33734387159347534,
                    -0.23123717308044434,
                    0.44790834188461304,
                    0.11207666993141174,
                    -0.5833277106285095,
                    -0.5719619393348694,
                    -0.46862876415252686,
                    0.3534186780452728,
                    -0.3377372920513153,
                    -0.29818418622016907,
                    0.24035078287124634,
                    -0.4340498149394989
                ],
                [
                    1.3625999689102173,
                    -4.207452774047852,
                    -3.4453189373016357,
                    4.059966087341309,
                    -2.793245315551758,
                    4.071875095367432,
                    3.0803396701812744,
                    -3.7152085304260254,
                    -4.2087836265563965,
                    -0.8636355996131897,
                    2.066098928451538,
                    -2.9868710041046143,
                    -3.248872995376587,
                    3.2993948459625244,
                    -3.26200008392334
                ],
                [
                    0.2708231210708618,
                    -0.23364171385765076,
                    -0.2641013264656067,
                    0.07219675928354263,
                    0.12652967870235443,
                    0.5697172284126282,
                    0.5291386842727661,
                    -0.10612697899341583,
                    -0.19018259644508362,
                    0.002500599017366767,
                    0.19882497191429138,
                    -0.4792001247406006,
                    -0.5671694278717041,
                    0.2887656092643738,
                    -0.19553308188915253
                ],
                [
                    0.5273624062538147,
                    -0.024960851296782494,
                    -0.015429845079779625,
                    0.076215460896492,
                    0.7999420166015625,
                    0.04414023458957672,
                    0.2813272774219513,
                    -0.17136885225772858,
                    -0.030792763456702232,
                    0.1493796706199646,
                    -0.22327367961406708,
                    0.1801411360502243,
                    -0.36989083886146545,
                    0.5829997062683105,
                    0.1559804379940033
                ]
            ],
            "biases": [
                -0.07228320091962814,
                3.0789875984191895,
                0.06844675540924072,
                -8.5899019241333,
                -0.2552468180656433,
                -0.5229294300079346
            ]
        },
        {
            "weights": [
                [
                    0.038400400429964066,
                    -0.20689254999160767,
                    -0.05116952583193779,
                    0.232130229473114,
                    0.11482327431440353,
                    -0.027343014255166054
                ]
            ],
            "biases": [
                0.5910145044326782
            ]
        }
    ],
    "inputLookup": null,
    "inputLookupLength": 0,
    "outputLookup": null,
    "outputLookupLength": 0,
    "options": {
        "inputSize": 0,
        "outputSize": 0,
        "binaryThresh": 0.5,
        "hiddenLayers": [
            15,
            6
        ],
        "activation": "tanh",
        "leakyReluAlpha": 0.01,
        "learningRate": 0.3
    },
    "trainOpts": {
        "activation": "tanh",
        "iterations": 1500,
        "errorThresh": 0.005,
        "log": true,
        "logPeriod": 50,
        "leakyReluAlpha": 0.01,
        "learningRate": 0.3,
        "momentum": 0.1,
        "callbackPeriod": 10,
        "timeout": "Infinity",
        "beta1": 0.9,
        "beta2": 0.999,
        "epsilon": 1e-8
    }
}
let net = new brain.NeuralNetwork(config);
net.fromJSON(savedNet)




function processDataForNN(preProcessedData) {
    let inputArr = []
    let outputArr = []
    let modifiedTrainingData = []
    for (let i=0; i< preProcessedData.length; i++) {
        outputArr.push(preProcessedData[i][0])
        inputArr.push(preProcessedData[i][2])
    }

    let minTime = Math.min(...outputArr)
    let maxMinusMin = Math.max(...outputArr) - minTime

    for (let j=0; j<outputArr.length; j++) {
        outputArr[j] = (outputArr[j]-minTime)/maxMinusMin
    }
    
    for (let k=0; k< preProcessedData.length; k++) {
        modifiedTrainingData.push({
            input: preProcessedData[k][2],
            output: [outputArr[k]]
        })
    }
    
    return modifiedTrainingData
}

function prepTestData() {

    fetch("./assets/Ellis_test.csv")
        .then(response => response.text())
        .then(data => {
        // Split the data into an array of lines
        var lines = data.split('\r\n');

        // Loop through each line
        lines = lines.map((line) => [Number(line.split(',')[1]),line.split(',')[2]])

        for (let j=0; j<lines.length; j++) {
            let kdata = processKPuzzle(lines[j][1]).then((value) => {
                lines[j].push(value)
                if (j == lines.length - 1) {
                    lines = processDataForNN(lines)
                    console.log("testing")
                    console.log(net)
                    console.log(net.test(lines))
                }
            })
        }

        })
        .catch(error => console.log(error));
}

function trainNN(trainingData, netName) {
    const config = {
        binaryThresh: 0.5,
        hiddenLayers: [15,6], // array of ints for the sizes of the hidden layers in the network
        activation: 'tanh', // supported activation types: ['sigmoid', 'relu', 'leaky-relu', 'tanh'],
        leakyReluAlpha: 0.01, // supported for activation type 'leaky-relu'
        learningRate: 0.3
    };
    
    // create a simple feed forward neural network with backpropagation
    net = new brain.NeuralNetwork(config);
    net
        .trainAsync(trainingData, {log: true, iterations: 1500, logPeriod: 50})
        .then((res) => {
            localStorage.setItem(netName, JSON.stringify(net.toFunction().toString()))
            localStorage.setItem('EllisNetObj', JSON.stringify(net.toJSON()))
            console.log("trained")
            prepTestData()
        
        })
        .catch((e) => {
            console.log(e)
        })
    return net
}

function runTraining() {
    // Get scramble & time data from local storage
    let myTrainingData = JSON.parse(localStorage.getItem('times'))

    // Pre-process data for use in NN
    let parsedTraningData = processDataForNN(myTrainingData)

    // Train NN on processed data
    trainNN(parsedTraningData, 'net')
}

async function getScramble() {
    let difficultyPreference = Number(document.getElementById('myRange').value)/100
    
    // Set loading text
    let scrambleElem = document.getElementById('scramble')
    scrambleElem.innerText = "Loading..."

    // Get saved NN and make into function
    let netLS = JSON.parse(localStorage.getItem('EllisNet'))
    var myFunc = eval('(' + netLS + ')');

    // Get scramble and puzzle instance from cubing.js CDN
    let scramble = await randomScrambleForEvent("333");
    let kPuzzle = await puzzles['3x3x3']['kpuzzle']()

    // Turn scramble into array of piece info and pass into NN, saving value of difficulty
    let transformationData = kPuzzle.algToTransformation(scramble).transformationData
    let eo = transformationData.EDGES.orientation.map(x => Math.max(...transformationData.EDGES.orientation) === 0 ? 0 : x/Math.max(...transformationData.EDGES.orientation))
    let ep = transformationData.EDGES.permutation.map(x => Math.max(...transformationData.EDGES.permutation) === 0 ? 0 : x/Math.max(...transformationData.EDGES.permutation))
    let co = transformationData.CORNERS.orientation.map(x => Math.max(...transformationData.CORNERS.orientation) === 0 ? 0 : x/Math.max(...transformationData.CORNERS.orientation))
    let cp = transformationData.CORNERS.permutation.map(x => Math.max(...transformationData.CORNERS.permutation) === 0 ? 0 : x/Math.max(...transformationData.CORNERS.permutation))
    let mergedArr = [...eo, ...ep, ...co, ...cp]
    let scrambleDifficulty = net.run(mergedArr)[0]
    console.log(scrambleDifficulty)

    // Check if scramble hard enough and log to screen

    if (difficultyPreference >.5) {
        if (scrambleDifficulty > difficultyPreference) {
            scrambleElem.innerText = scramble
        } else {
            getScramble()
        }
    } else if (difficultyPreference < .5) {
        if (scrambleDifficulty < difficultyPreference) {
            scrambleElem.innerText = scramble
        } else {
            getScramble()
        }
    } else {
        if (scrambleDifficulty < .9999) {
            scrambleElem.innerText = scramble
        } else {
            getScramble()
        }
    }
    return
}

async function processKPuzzle(scram) {
    let kPuzzle = await puzzles['3x3x3']['kpuzzle']()
    let transformationData = kPuzzle.algToTransformation(scram).transformationData
    let eo = transformationData.EDGES.orientation.map(x => Math.max(...transformationData.EDGES.orientation) === 0 ? 0 : x/Math.max(...transformationData.EDGES.orientation))
    let ep = transformationData.EDGES.permutation.map(x => Math.max(...transformationData.EDGES.permutation) === 0 ? 0 : x/Math.max(...transformationData.EDGES.permutation))
    let co = transformationData.CORNERS.orientation.map(x => Math.max(...transformationData.CORNERS.orientation) === 0 ? 0 : x/Math.max(...transformationData.CORNERS.orientation))
    let cp = transformationData.CORNERS.permutation.map(x => Math.max(...transformationData.CORNERS.permutation) === 0 ? 0 : x/Math.max(...transformationData.CORNERS.permutation))
    let mergedArr = [...eo, ...ep, ...co, ...cp]
    return mergedArr
}

let updateTimeLog = async function(time) {
    let mergedArr = await processKPuzzle(scrambleElem.innerText)
    if (!localStorage.getItem('times')) {
        localStorage.setItem('times',JSON.stringify([[time,scrambleElem.innerText,mergedArr]]))
        arr = JSON.parse(localStorage.getItem('times'))
    } else {
        arr = JSON.parse(localStorage.getItem('times'))
        arr.push([time,scrambleElem.innerText,mergedArr])
        localStorage.setItem('times', JSON.stringify(arr))
    }

    // Subtract 4 tr's from the stat list, and another to adjust for index
    let currentNumOfTimes = document.querySelectorAll('tr').length - 9
    arr = arr.slice(currentNumOfTimes, arr.length)

    addTableData(arr)
    getScramble()
    updateStats()

    let timeTable = document.querySelector('.table-container')
    timeTable.scrollTop = timeTable.scrollHeight;

    return
}

function updateStats() {
    let data = JSON.parse(localStorage.getItem('times'))
    let currentTds = document.getElementById('current-avg').querySelectorAll('tr td:nth-child(2)')
    let bestTimes = document.getElementById('best-avg').querySelectorAll('tr td:nth-child(2)')
    let justTimes = data.map(row => row[0])
    let currentStats = [avgLastNofArr(justTimes,3),avgLastNofArr(justTimes,5),avgLastNofArr(justTimes,12)]
    for (let k=0; k < currentTds.length; k++) {
        currentTds[k].innerText = typeof currentStats[k] == 'number' ? currentStats[k].toFixed(2) : '--'

        if (bestTimes[k].innerText == '--' || Number(currentTds[k].innerText) < Number(bestTimes[k].innerText)) {
            bestTimes[k].innerText = currentTds[k].innerText
        }
    }
}

function avgLastNofArr(arr, n) {
    if (arr.length < n) {
        return '--'
    }
    arr = arr.slice(-n)
    let numTimesToRemove

    if (n==3) {
        numTimesToRemove = 0
    } else if (n==5 || n==12) {
        numTimesToRemove = 2
    } else {
        numTimesToRemove = Math.round(.1*arr.length)
    }

    if (numTimesToRemove != 0) {
        let half = Math.round(numTimesToRemove/2)
        for (let i = 0; i < half; i++) {
            arr.splice(arr.indexOf(Math.max(...arr)),1)
            arr.splice(arr.indexOf(Math.min(...arr)),1)
        }
    }

    return arr.reduce((total,current) => total + current)/arr.length
}

let addTableData = function(arr) {
    let lastEntry = tableBody.lastChild.children ? Number(tableBody.lastChild.children[1].innerText) : 0
    for (let j=1; j <= arr.length; j++) {
        let newRow = document.createElement('tr')
        let newSolveNum = document.createElement('td')
        let newTime = document.createElement('td')
        let closeBtnCell = document.createElement('td')
        let btnSpan = document.createElement('span')
        btnSpan.innerText = 'X'
        closeBtnCell.addEventListener('click', handleDelete)
        closeBtnCell.appendChild(btnSpan)
        newRow.append(closeBtnCell, newSolveNum, newTime)
        newSolveNum.innerText = arr.length == 1 ? lastEntry + 1 : j
        newTime.innerText = arr[j-1][0].toFixed(2)
        tableBody.appendChild(newRow)
    }
}

let handleDelete = function(event) {
    let parentRow = event.currentTarget.parentElement
    let index = Number(parentRow.querySelectorAll('td')[1].innerText) - 1
    let storedTimes = JSON.parse(localStorage.getItem('times'))

    storedTimes.splice(index,1)
    localStorage.setItem('times',JSON.stringify(storedTimes))
    parentRow.remove()

    let timeTable = document.querySelectorAll('.table-container > table tr')

    for (let j=1; j < timeTable.length; j++) {
        timeTable[j].querySelectorAll('td')[1].innerText = j
    }
    updateStats()
    iterateHistorical()
}

let iterateHistorical = function() {
    let timeTableRows = document.querySelectorAll('.table-container tr > td:nth-child(3)')
    let arr = [...timeTableRows].map((solveTimeElem) => Number(solveTimeElem.innerText))
    console.log(arr)

    let bo3 = 100000
    let ao5 = 100000
    let ao12 = 100000

    if (arr.length >= 3) {
        for (let i=0; i < arr.length-2; i++) {
            let currentThree = (arr[i]+arr[i+1]+arr[i+2])/3
            bo3 = currentThree < bo3 ? currentThree : bo3
        }
    }
    if (arr.length >= 5) {
        for (let i=0; i < arr.length-4; i++) {
            let tempArr = arr.slice(i,i+5)
            tempArr.splice(tempArr.indexOf(Math.max(...tempArr)),1)
            tempArr.splice(tempArr.indexOf(Math.min(...tempArr)),1)
            let currentFive = tempArr.reduce((total,current) => total + current)/tempArr.length
            ao5 = currentFive < ao5 ? currentFive : ao5
        }
    }
    if (arr.length >= 12) {
        for (let i=0; i < arr.length-11; i++) {
            let tempArr = arr.slice(i,i+12)
            tempArr.splice(tempArr.indexOf(Math.max(...tempArr)),1)
            tempArr.splice(tempArr.indexOf(Math.min(...tempArr)),1)
            let currentTwelve = tempArr.reduce((total,current) => total + current)/tempArr.length
            ao12 = currentTwelve < ao12 ? currentTwelve : ao12
        }
    }

    let bestTimes = document.getElementById('best-avg').querySelectorAll('tr td:nth-child(2)')
    bestTimes[0].innerText = Number(bo3).toFixed(2)
    bestTimes[1].innerText = Number(ao5).toFixed(2)
    bestTimes[2].innerText = Number(ao12).toFixed(2)
    return
}

let timerStart = function(event) {
    if (event.code == 'Space' && !isRunning) {
        timer.style.color = "black"
        const init = Date.now()
        isRunning = true
        interval = setInterval(() => {
            timer.innerHTML = (Math.round((Date.now()-init)/10)/100).toFixed(2)
        }, 10)
    } else if (event.code == 'Space' && isRunning) {
        isRunning = false
        updateTimeLog(Number(timer.innerHTML))
        return
    }
}

let timerStop = function(event) {
    if (event.code == 'Space' && isRunning) {
        clearInterval(interval)   
    } else if (event.code == 'Space' && !isRunning) {
        timer.style.color = "green"
    }
}

//Get first 3x3 scramble
getScramble()


function logData() {

    fetch("./assets/Ellis_solves.csv")
        .then(response => response.text())
        .then(data => {
        // Split the data into an array of lines
        var lines = data.split('\r\n');

        // Loop through each line
        lines = lines.map((line) => [Number(line.split(',')[1]),line.split(',')[2]])

        for (let j=0; j<lines.length; j++) {
            let kdata = processKPuzzle(lines[j][1]).then((value) => {
                lines[j].push(value)
                if (j == lines.length - 1) {
                    lines = processDataForNN(lines)
                    console.log(lines)

                    trainNN(lines, 'EllisNet')
                
                }
            })
        }

        })
        .catch(error => console.log(error));
}

// logData()


// Event Listeners
document.addEventListener('keyup', timerStart)
document.addEventListener('keydown', timerStop)
// document.querySelector('#train').addEventListener('click', runTraining)
document.getElementById('myRange').addEventListener('change', () => {
    getScramble()
    let localMax = Number(document.getElementById('myRange').max)
    let localMin = Number(document.getElementById('myRange').min)

    difficultyPreference = Number(document.getElementById('myRange').value)
    let labelOutput = Math.round((difficultyPreference-localMin)/(localMax-localMin)*100)
    difficultyLabel.innerText = "Difficulty: " + labelOutput
})
document.addEventListener('DOMContentLoaded', () => {
    if (!localStorage.getItem('times')) {
        return
    }
    let myArr = JSON.parse(localStorage.getItem('times'))
    addTableData(myArr)
    updateStats()
})

